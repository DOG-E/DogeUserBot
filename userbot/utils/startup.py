# @DogeUserBot - < https://t.me/DogeUserBot >
# Copyright (C) 2021 - DOG-E
# T√ºm haklarƒ± saklƒ±dƒ±r.
#
# Bu dosya, < https://github.com/DOG-E/DogeUserBot > par√ßasƒ±dƒ±r.
# L√ºtfen GNU Affero Genel Kamu Lisansƒ±nƒ± okuyun;
# < https://www.github.com/DOG-E/DogeUserBot/blob/DOGE/LICENSE/ >
# ================================================================
from asyncio.tasks import sleep
from datetime import timedelta
from glob import glob
from os import environ, execle, remove
from pathlib import Path
from random import randint
from sys import executable as sysexecutable
from sys import exit

from pylists import *
from telethon import Button
from telethon.errors.rpcerrorlist import YouBlockedUserError
from telethon.tl.functions.contacts import UnblockRequest
from telethon.tl.functions.help import GetConfigRequest
from telethon.tl.types import InputMessagesFilterPhotos, User
from telethon.utils import get_peer_id

from .. import BOTLOG, BOTLOG_CHATID, PM_LOGGER_GROUP_ID, tr
from ..Config import Config
from ..core.logger import logging
from ..core.session import doge
from ..helpers.resources import constants
from ..helpers.utils import install_pip
from ..sql_helper.global_collection import (
    del_keyword_collectionlist,
    get_item_collectionlist,
)
from ..sql_helper.globals import dgvar, gvar, sgvar
from .pluginmanager import load_module
from .tools import create_channel, create_supergroup

LOGS = logging.getLogger("DogeUserBot")


async def setup_bot():
    try:
        await doge.connect()
        async for o in await doge(GetConfigRequest()).dc_options:
            if o.ip_address == doge.session.server_address:
                if doge.session.dc_id != o.id:
                    LOGS.warn(f"üõ†Ô∏è Oturumdaki DC kimliƒüi {doge.session.dc_id} ‚û°Ô∏è {o.id} olarak d√ºzenlendi.")
                doge.session.set_dc(o.id, o.ip_address, o.port)
                doge.session.save()
                break
    except Exception as e:
        LOGS.error(f"üö® [STRING_SESSION] - {e}")
        dgvar("OWNER_ID")
        exit()


async def checkid_setme():
    doge.me = await doge.get_me()
    doge.uid = get_peer_id(doge.me)
    if gvar("OWNER_ID") is None:
        try:
            async for msg in doge.iter_messages("DogeStatus", limit=1, filter=InputMessagesFilterPhotos):
                stat = str(str(msg.text).split("@DogeUserBot Kurulumu: ")[1]).split("\n")
            if "`A√ßƒ±k`" in stat:
                sgvar("CACHE_OWNER_ID", int(doge.uid))
            elif "`Kapalƒ±`" in stat:
                exit()
        except Exception as e:
            LOGS.error(f"üö® {e}")
            exit()
        await sleep(0.5)
    try:
        await sleep(3)
        sgvar("OWNER_ID", int(doge.uid))
        await sleep(0.5)
    except Exception as e:
        LOGS.error(f"üö® {e}")
    if gvar("CACHE_OWNER_ID") != gvar("OWNER_ID"):
        dgvar("OWNER_ID")
        dgvar("CACHE_OWNER_ID")
        dgvar("ALIVE_NAME")
        dgvar("CACHE_ALIVE_NAME")
        dgvar("BOT_TOKEN")
        dgvar("BOT_USERNAME")
        dgvar("PRIVATE_GROUP_BOT_API_ID")
        dgvar("PM_LOGGER_GROUP_ID")
        dgvar("TAG_LOGGER_GROUP_ID")
        dgvar("PLUGIN_CHANNEL")
        dgvar("FBAN_GROUP_ID")
        dgvar("PRIVATE_CHANNEL_ID")
        dgvar("HLOGGER_ID")
        dgvar("TG_2STEP_VERIFICATION_CODE")
        dgvar("hmention")
        dgvar("mention")
        LOGS.error(
            "üö® Kullanƒ±cƒ± deƒüi≈üikliƒüi algƒ±ladƒ±m.\
            \nüîÉ Kurulumu yeniden ba≈ülatƒ±yorum..."
        )
        executable = sysexecutable.replace(" ", "\\ ")
        args = [executable, "-m", "userbot"]
        execle(executable, *args, environ)
        exit(0)
    if gvar("OWNER_ID") in G_YS:
        f = "https://telegra.ph/file/b7e740bbda31d43d510ab.jpg"
        await doge.send_message("me", constants.sndmsgg_ys, file=f)
        LOGS.error(constants.l_gmsgg_ys)
        await doge.disconnect()
        exit()

    if gvar("ALIVE_NAME") is None:
        if Config.ALIVE_NAME:
            sgvar("ALIVE_NAME", str(Config.ALIVE_NAME))
            sgvar("CACHE_ALIVE_NAME", str(Config.ALIVE_NAME))
        else:
            sgvar("ALIVE_NAME", str(doge.me.first_name))
            sgvar("CACHE_ALIVE_NAME", str(doge.me.first_name))
    if (
        gvar("hmention") is None
        or gvar("mention") is None
        or gvar("CACHE_ALIVE_NAME") != gvar("ALIVE_NAME")
    ):
        hmention = (
            f"<a href = tg://user?id={int(gvar('OWNER_ID'))}>{gvar('ALIVE_NAME')}</a>"
        )
        mention = f"[{gvar('ALIVE_NAME')}](tg://user?id={int(gvar('OWNER_ID'))})"
        sgvar("hmention", str(hmention))
        sgvar("mention", str(mention))


async def setup_assistantbot():
    if gvar("BOT_TOKEN"):
        return
    if Config.BOT_TOKEN:
        sgvar("BOT_TOKEN", str(Config.BOT_TOKEN))
        return
    LOGS.info("ü¶¥ Sizin i√ßin @BotFather'dan asistan botu olu≈üturuyorum.")
    botname = f"üê∂ {gvar('ALIVE_NAME')} As…™s·¥õ·¥Ä…¥ Bo·¥õ" if gvar("ALIVE_NAME") else f"üê∂ {doge.me.first_name} As…™s·¥õ·¥Ä…¥ Bo·¥õ"
    botusername = f"{doge.me.username}Bot" if doge.me.username else f"Doge_{(str(doge.me.id))[5:]}_Bot"
    bf = "BotFather"
    try:
        await doge.send_message(bf, "/cancel")
    except YouBlockedUserError:
        await doge(UnblockRequest(bf))
        await doge.send_message(bf, "/cancel")
    await sleep(0.5)
    await doge.send_message(bf, "/newbot")
    await sleep(1)
    is_ok = (await doge.get_messages(bf, limit=1))[0].text
    if is_ok.startswith("That I cannot do."):
        LOGS.error(
            "üö® @BotFather ile bir bot olu≈üturun ve BOT_TOKEN deƒüi≈ükenine ayar yapƒ±n ve beni yeniden ba≈ülatƒ±n."
        )
        exit()

    await doge.send_message(bf, botname)
    await sleep(1)
    is_ok = (await doge.get_messages(bf, limit=1))[0].text
    if not is_ok.startswith("Good."):
        await doge.send_message(bf, "üê∂ D·¥è…¢·¥á As…™s·¥õ·¥Ä…¥ƒ±·¥ç")
        await sleep(1)
        is_ok = (await doge.get_messages(bf, limit=1))[0].text
        if not is_ok.startswith("Good."):
            LOGS.error(
                "üö® @BotFather ile bir bot olu≈üturun ve BOT_TOKEN deƒüi≈ükenine ayar yapƒ±n ve beni yeniden ba≈ülatƒ±n."
            )
            exit()

    await doge.send_message(bf, botusername)
    await sleep(1)
    is_ok = (await doge.get_messages(bf, limit=1))[0].text
    await doge.send_read_acknowledge(bf)
    if is_ok.startswith("Sorry,"):
        ran = randint(1, 100)
        botusername = f"Doge_{(str(doge.uid))[6:]}{str(ran)}_Bot"
        await doge.send_message(bf, botusername)
        await sleep(1)
        now_ok = (await doge.get_messages(bf, limit=1))[0].text
        if now_ok.startswith("Done!"):
            bottoken = now_ok.split("`")[1]
            bun = f"@{botusername}"
            sgvar("BOT_TOKEN", bottoken)
            await doge.send_message(bf, "/setinline")
            await sleep(1)
            await doge.send_message(bf, bun)
            await sleep(1)
            await doge.send_message(bf, "üê∂ Ke≈üfet...")
            await doge.send_read_acknowledge(bf)
            sgvar("BOT_USERNAME", bun)
            LOGS.info(f"‚úÖ Ba≈üarƒ±lƒ±! {bun} asistan botunuzu olu≈üturdum!")
        else:
            LOGS.error(
                "üö® L√ºtfen @BotFather'dan botlarƒ±nƒ±zƒ± silin veya bir botun belirteci ile BOT_TOKEN'i ayarlayƒ±n."
            )
            exit()

    elif is_ok.startswith("Done!"):
        bottoken = is_ok.split("`")[1]
        bun = f"@{botusername}"
        sgvar("BOT_TOKEN", bottoken)
        await doge.send_message(bf, "/setinline")
        await sleep(1)
        await doge.send_message(bf, bun)
        await sleep(1)
        await doge.send_message(bf, "üê∂ Ke≈üfet...")
        await doge.send_read_acknowledge(bf)
        sgvar("BOT_USERNAME", bun)
        LOGS.info(f"‚úÖ Ba≈üarƒ±lƒ±! {bun} asistan botunuzu olu≈üturdum!")
    else:
        LOGS.error(
            "üö® L√ºtfen @BotFather'dan botlarƒ±nƒ±zƒ± silin veya bir botun belirteci ile BOT_TOKEN'i ayarlayƒ±n."
        )
        exit()


async def start_assistantbot():
    try:
        await doge.bot.start(bot_token=gvar("BOT_TOKEN"))
    except Exception:
        try:
            if Config.BOT_TOKEN:
                sgvar("BOT_TOKEN", str(Config.BOT_TOKEN))
                await doge.bot.start(bot_token=gvar("BOT_TOKEN"))
        except Exception as e:
            LOGS.error(f"üö® {e}")
            dgvar("BOT_TOKEN")
            executable = sysexecutable.replace(" ", "\\ ")
            args = [executable, "-m", "userbot"]
            execle(executable, *args, environ)
            exit(0)

    doge.bot.me = await doge.bot.get_me()
    if gvar("BOT_USERNAME") is None:
        sgvar("BOT_USERNAME", f"@{doge.bot.me.username}")


async def load_plugins(folder):
    path = f"userbot/{folder}/*.py"
    files = sorted(glob(path))
    for name in files:
        with open(name) as f:
            path1 = Path(f.name)
            shortname = path1.stem
            try:
                if shortname.replace(".py", "") not in Config.NO_LOAD:
                    flag = True
                    check = 0
                    while flag:
                        try:
                            load_module(
                                shortname.replace(".py", ""),
                                plugin_path=f"userbot/{folder}",
                            )
                            break
                        except ModuleNotFoundError as e:
                            install_pip(e.name)
                            check += 1
                            if check > 5:
                                break
                else:
                    remove(Path(f"userbot/{folder}/{shortname}.py"))
            except Exception as e:
                remove(Path(f"userbot/{folder}/{shortname}.py"))
                LOGS.error(str(f"üö® {e} hatasƒ± nedeniyle {shortname} y√ºklenemedi."))


async def verifyLoggerGroup():  # sourcery no-metrics
    flag = False
    odogeubc = "üß° @DogeUserBot"
    if BOTLOG:
        vinfo = "PRIVATE_GROUP_BOT_API_ID"
        try:
            entity = await doge.get_entity(BOTLOG_CHATID)
            if not isinstance(entity, User) and not entity.creator:
                if entity.default_banned_rights.send_messages:
                    LOGS.error(
                        f"üö® Belirtilen {vinfo} i√ßin mesaj g√∂nderme izni yok. L√ºtfen kontrol edin!"
                    )
                if entity.default_banned_rights.invite_users:
                    LOGS.error(
                        f"üö® Belirtilen {vinfo} i√ßin √ºye ekleme izni yok. L√ºtfen kontrol edin!"
                    )
        except ValueError:
            LOGS.error(f"üö® {vinfo} deƒüerini bulamadƒ±m. Doƒüruluƒüundan emin olun.")
        except TypeError:
            LOGS.error(f"üö® {vinfo} desteklenmiyor. Doƒüruluƒüundan emin olun.")
        except Exception as e:
            LOGS.error(
                f"üö® {vinfo} doƒürulanmaya √ßalƒ±≈üƒ±rken bir hata olu≈ütu.\nHATA: {str(e)}"
            )
    else:
        descript = f"üöß BU GRUBU Sƒ∞LMEYƒ∞N!\n\
        \nüóë Eƒüer bu grubu silerseniz,\
        \nüêæ Doge √ßalƒ±≈ümayacaktƒ±r.\n\
        \n{odogeubc}"
        gphoto = await doge.upload_file(file="userbot/helpers/resources/DogeBotLog.jpg")
        await sleep(0.75)
        _, groupid = await create_supergroup(
            "üêæ Do…¢·¥á Bo·¥õ Lo…¢", doge, gvar("BOT_USERNAME"), descript, gphoto, "Doge"
        )
        await sleep(0.75)
        descmsg = f"**üöß BU GRUBU Sƒ∞LMEYƒ∞N!\
        \nüöß BU GRUPTAN AYRILMAYIN!\
        \nüöß BU GRUBU DEƒûƒ∞≈ûTƒ∞RMEYƒ∞N!**\n\
        \nüóë Eƒüer bu grubu silerseniz,\
        \nüêæ Doge √ßalƒ±≈ümayacaktƒ±r!\n\
        \n**{odogeubc}**"
        msg = await doge.bot.send_message(groupid, descmsg)
        await sleep(0.25)
        await msg.pin()
        sgvar("PRIVATE_GROUP_BOT_API_ID", groupid)
        LOGS.info("‚úÖ PRIVATE_GROUP_BOT_API_ID i√ßin √∂zel bir grup ba≈üarƒ±yla olu≈üturdum!")
        flag = True

    if gvar("PMLOGGER") is None and Config.PMLOGGER:
        sgvar("PMLOGGER", "True")
    if gvar("PMLOGGER") == "True":
        if PM_LOGGER_GROUP_ID != -100 or gvar("PM_LOGGER_GROUP_ID"):
            vinfo = "PM_LOGGER_GROUP_ID"
            try:
                entity = await doge.get_entity(PM_LOGGER_GROUP_ID)
                if not isinstance(entity, User) and not entity.creator:
                    if entity.default_banned_rights.send_messages:
                        LOGS.error(
                            f"üö® Belirtilen {vinfo} i√ßin mesaj g√∂nderme izni eksik. Doƒüruluƒüundan emin olun!"
                        )
                    if entity.default_banned_rights.invite_users:
                        LOGS.error(
                            f"üö®Belirtilen {vinfo} i√ßin √ºye ekleme izni eksik. Doƒüruluƒüundan emin olun!"
                        )
            except ValueError:
                LOGS.error(f"üö® {vinfo} deƒüerini bulamadƒ±m. Doƒüruluƒüundan emin olun.")
            except TypeError:
                LOGS.error(f"üö® {vinfo} desteklenmiyor. Doƒüruluƒüundan emin olun.")
            except Exception as e:
                LOGS.error(
                    f"üö® {vinfo} doƒürulanmaya √ßalƒ±≈üƒ±rken bir hata olu≈ütu.\nHATA: {str(e)}"
                )
        else:
            descript = f"üöß BU GRUBU Sƒ∞LMEYƒ∞N!\n\
            \nüóë Eƒüer silerseniz,\
            \nüö´ PM Logger √ßalƒ±≈ümayacaktƒ±r.\n\
            \n{odogeubc}"
            gphoto = await doge.upload_file(
                file="userbot/helpers/resources/DogePmLog.jpg"
            )
            await sleep(0.75)
            _, groupid = await create_supergroup(
                "üêæ Do…¢·¥á P·¥ç Lo…¢", doge, gvar("BOT_USERNAME"), descript, gphoto, "Doge"
            )
            await sleep(0.75)
            descmsg = f"**üöß BU GRUBU Sƒ∞LMEYƒ∞N!\
            \nüöß BU GRUPTAN AYRILMAYIN!\
            \nüöß BU GRUBU DEƒûƒ∞≈ûTƒ∞RMEYƒ∞N!**\n\
            \nüóë Eƒüer bu grubu silerseniz,\
            \nüö´ PM Logger √∂zelliƒüi √ßalƒ±≈ümayacaktƒ±r.\n\
            \n**ü¶¥ EƒûER GRUBU Sƒ∞LMEK ƒ∞STERSENƒ∞Z,\
            \nüîÖ ƒ∞LK √ñNCE ≈ûUNU YAZIN:**\
            \n`.sdog PMLOGGER False`\n\
            \n**{odogeubc}**"
            msg = await doge.bot.send_message(groupid, descmsg)
            await sleep(0.25)
            await msg.pin()
            sgvar("PM_LOGGER_GROUP_ID", groupid)
            LOGS.info("‚úÖ PM_LOGGER_GROUP_ID i√ßin √∂zel bir grup ba≈üarƒ±yla olu≈üturdum!")
            flag = True

    if gvar("PLUGINS") is None and Config.PLUGINS:
        sgvar("PLUGINS", "True")
    if gvar("PLUGINS") == "True" and gvar("PLUGIN_CHANNEL") is None:
        descript = f"üöß BU KANALI Sƒ∞LMEYƒ∞N!\n\
        \nüóë Eƒüer bu kanalƒ± silerseniz,\
        \nüß© y√ºklenen t√ºm ekstra pluginler silinecektir.\n\
        \n{odogeubc}"
        cphoto = await doge.upload_file(
            file="userbot/helpers/resources/DogeExtraPlugin.jpg"
        )
        await sleep(0.75)
        _, channelid = await create_channel(
            "üêæ Do…¢·¥á E·¥ãs·¥õ Ä·¥Ä P ü·¥ú…¢…™…¥ ü·¥á Ä", doge, descript, cphoto
        )
        await sleep(0.75)
        descmsg = f"**üöß BU KANALI Sƒ∞LMEYƒ∞N!\
        \nüöß BU KANALDAN AYRILMAYIN!\
        \nüöß BU KANALDA DEƒûƒ∞≈ûƒ∞KLƒ∞K YAPMAYIN!**\n\
        \nüóë Eƒüer silerseniz,\
        \nüß© y√ºklenen t√ºm ekstra pluginler silinecektir.\n\
        \n**ü¶¥ EƒûER KANALI Sƒ∞LMEK ƒ∞STERSENƒ∞Z,\
        \nüîÖ ƒ∞LK √ñNCE ≈ûUNU YAZIN:**\
        \n`.sdog PLUGINS False`\n\
        \n**{odogeubc}**"
        msg = await doge.send_message(channelid, descmsg)
        await sleep(0.25)
        await msg.pin()
        sgvar("PLUGIN_CHANNEL", channelid)
        LOGS.info("‚úÖ PLUGIN_CHANNEL i√ßin √∂zel bir kanal ba≈üarƒ±yla olu≈üturuldum!")
        flag = True

    if flag:
        executable = sysexecutable.replace(" ", "\\ ")
        args = [executable, "-m", "userbot"]
        execle(executable, *args, environ)
        exit(0)


async def startupmessage():
    try:
        if BOTLOG:
            Config.DOGELOGO = await doge.bot.send_file(
                BOTLOG_CHATID,
                "https://telegra.ph/file/dd72e42027e6e7de9c0c9.jpg",
                caption="**üß° D·¥è…¢·¥á Us·¥á ÄB·¥è·¥õ K·¥ú ü ü·¥Ä…¥…™·¥ç·¥Ä H·¥Ä·¥¢…™ Ä üß°**",
                buttons=[
                    (Button.inline("üêï‚Äçü¶∫ Y·¥Ä Ä·¥Ö…™·¥ç", data="backmainmenu"),),
                    (Button.url("üí¨ D·¥ás·¥õ·¥á·¥ã", "https://t.me/DogeSup"),),
                    (Button.url("üß© P ü·¥ú…¢…™…¥", "https://t.me/DogePlugin"),),
                ],
            )
    except Exception as e:
        LOGS.error(f"üö® {e}")
        return None
    try:
        msg_details = list(get_item_collectionlist("restart_update"))
        if msg_details:
            msg_details = msg_details[0]
    except Exception as e:
        LOGS.error(f"üö® {e}")
        return None
    try:
        if msg_details:
            await doge.check_testcases()
            await doge.edit_message(
                msg_details[0], msg_details[1], "**üê∂ D·¥è…¢·¥á Us·¥á ÄBo·¥õ G·¥á Ä…™ G·¥á ü·¥Ö…™ üêæ**"
            )
            if gvar("restartupdate") is not None:
                await doge.send_message(
                    msg_details[0],
                    f"{tr}ping",
                    reply_to=msg_details[1],
                    schedule=timedelta(seconds=10),
                )
            del_keyword_collectionlist("restart_update")
    except Exception as e:
        LOGS.error(f"üö® {e}")
        return None


async def customize_assistantbot():
    try:
        if doge.bot.me.photo:
            return
        DOG = gvar("BOT_USERNAME")
        LOGS.info(f"üé® {DOG} asistan botunuzu @BotFather ile √∂zelle≈ütiriyorum.")
        master = doge.me.first_name if not doge.me.username else f"@{doge.me.username}"
        bf = "BotFather"
        await doge.send_message(bf, "/cancel")
        await sleep(0.5)
        await doge.send_message(bf, "/start")
        await sleep(1)
        await doge.send_message(bf, "/setuserpic")
        await sleep(1)
        await doge.send_message(bf, DOG)
        await sleep(1)
        await doge.send_file(bf, "userbot/helpers/resources/DogeAssistant.jpg")
        await sleep(2)
        await doge.send_message(bf, "/setabouttext")
        await sleep(1)
        await doge.send_message(bf, DOG)
        await sleep(1)
        await doge.send_message(
            bf,
            f"üß° {master}'·¥ú…¥ As…™s·¥õ·¥Ä…¥ Bo·¥õ·¥ú è·¥ú·¥ç\n\
            \nüê∂ @DogeUserBot'·¥õ·¥Ä…¥ ‚ù§Ô∏è ƒ∞ ü·¥á O ü·¥ú≈ü·¥õ·¥ú Ä·¥ú ü·¥Ö·¥ú üêæ",
        )
        await sleep(1.5)
        await doge.send_message(bf, "/setdescription")
        await sleep(1)
        await doge.send_message(bf, DOG)
        await sleep(1)
        await doge.send_message(
            bf,
            f"üêï‚Äçü¶∫ Do…¢·¥á Us·¥á ÄBo·¥õ As…™s·¥õ·¥Ä…¥ Bo·¥õ·¥ú\
            \nüß° S·¥Ä ú…™·¥ò: {master}\n\
            \nüê∂ @DogeUserBot'·¥õ·¥Ä…¥ ‚ù§Ô∏è ƒ∞ ü·¥á O ü·¥ú≈ü·¥õ·¥ú Ä·¥ú ü·¥Ö·¥ú üêæ",
        )
        await sleep(1.5)
        await doge.send_message(bf, "/setcommands")
        await sleep(1)
        await doge.send_message(bf, DOG)
        await sleep(1)
        await doge.send_message(
            bf,
            "start - üê∂ Botunuzu Ba≈ülatƒ±n\
            \nyardim - üêæ Yardƒ±m Men√ºs√º\
            \nayarlar - üß∂ Doge Ayarlarƒ±\
            \nkbilgi - ‚ÑπÔ∏è Botu kullanan ki≈üilerin bilgileri\
            \nyasakla - ‚õî Kullanƒ±cƒ±yƒ± bottan yasakla\
            \nyasakac - üî∞ Kullanƒ±cƒ±nƒ±n yasaƒüƒ±nƒ± kaldƒ±r\
            \nyayin - üì£ Kullanƒ±cƒ±lara yayƒ±n yapƒ±n",
        )
        await sleep(1)
        await doge.send_message(bf, "/setprivacy")
        await sleep(1)
        await doge.send_message(bf, DOG)
        await sleep(1)
        await doge.send_message(bf, "Disable")
        await doge.send_read_acknowledge(bf)
        LOGS.info(f"‚úÖ Ba≈üarƒ±lƒ±! {DOG} asistan botunuzu √∂zelle≈ütirdim!")
    except Exception as e:
        LOGS.warning(f"üö® {str(e)}")
